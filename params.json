{"name":"Quorra","tagline":"tetrahedral and hexagonal isometric grid placement engine","body":"quorra\r\n======\r\n\r\n[![travis-ci status](https://secure.travis-ci.org/ajacksified/quorra.png)](http://travis-ci.org/#!/ajacksified/quorra/builds)\r\n\r\nquorra is an isometric grid engine that works with quadrilaterial and hexagonal\r\ngrids. It is designed to be easy used with any game engine. Simply plug in a\r\ntile size, then recieve pixel coordinates for placement of objects.\r\n\r\n[Read the docs](http://www.quorra.io)\r\n\r\nI built it after not being able to find a non-commercial javascript hex-grid\r\nlibrary after lots of searching. Let's build something awesome and open-source.\r\n\r\nUse\r\n---\r\n\r\nquorra works in both Node.js and browser environments. quorra is fully\r\nsupported by browserify, or else will attach to the window.\r\n\r\n```html\r\n<script src='quorra.min.js'></script>\r\n```\r\n\r\nor\r\n\r\n```javascript\r\nvar quorra = require('quorra');\r\n```\r\n\r\n```javascript\r\nvar hexGrid = new quorra.Hexagonal({\r\n  height: 64,\r\n  width: 64\r\n});\r\n\r\n// Get position of item on grid\r\nvar position = hexGrid.place(2, 1);\r\n// position = { x : 128,  y: 0 }\r\n\r\n// Get position of item on grid that has a custom size, so we can place\r\nnon-standard elements in the center of a tile\r\nvar housePosition = hexGrid.place(2, 1, {\r\n  height: 32,\r\n  width: 32\r\n\r\n  // xOffset: 0,\r\n  // yOffset: 0\r\n});\r\n// houseposition = { x : 144,  y: 16 }\r\n\r\n```\r\n\r\nRead the full API docs \r\n\r\nContributing\r\n------------\r\n\r\nSee CONTRIBUTING.md. All issues, suggestions, and most importantly pull requests\r\nare welcome.\r\n\r\nTesting\r\n-------\r\n\r\nTests are written with [mocha](http://mochaui.com) and exist in the `./tests`\r\ndirectory.\r\n\r\n```\r\nnpm test\r\n```\r\n\r\n\r\nLicense\r\n-------\r\n\r\nCopyright 2013 Jack Lawson\r\nMIT licensed. See LICENSE for details.\r\n\r\n","google":"UA-43637549-1","note":"Don't delete this file! It's used internally to help with page regeneration."}